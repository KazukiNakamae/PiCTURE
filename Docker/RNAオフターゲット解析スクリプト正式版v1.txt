# GATK resource bundle（https://gatk.broadinstitute.org/hc/en-us/articles/360035890811-Resource-bundle）に準じた形で解析を行う

# 二号機へログイン（conda/dockerあり）
ssh bonohulab2@10.28.16.58 -p 10022
bonohulab2020
###
スペック 14コア
RAM 240 GB (WSL2部分)
###

# 作業ディレクトリへ移動
cd Nakamae
cd RNA_offtarget_analysis
# 作業ディレクトリ作成
mkdir RNA_offtarget_analysis_v1_GSE121668_fastq;
cd RNA_offtarget_analysis_v1_GSE121668_fastq;

# STARのdockerイメージを作成、これは一回行うだけで良い
# 「参照：ヒトGATK用のSTARイメージ作成.txt」

# trim_galoreでトリムとQCを行うためのDockerイメージをダウンロード
docker pull clinicalgenomics/trim_galore:0.6.7

# フィルタリングを行う
mkdir INPUT; # 生のシーケンスファイルをおくディレクトリ
mkdir 1_trim_galore;
# 今回は前回解析したデータをそのままコピーして持ってくる（ワークフロー化する場合はここはconfigファイルか何かで設定できるようにすべき）
cp ~/Nakamae/RNA_offtarget_analysis/GSE121668_fastq/SRR8096262_1.fastq INPUT/;
cp ~/Nakamae/RNA_offtarget_analysis/GSE121668_fastq/SRR8096262_2.fastq INPUT/;
# ワークフロー化するならこの-jはコア数を表すのでconfigで設定できるようにする必要あり
# シングルエンドの場合の条件分岐とコマンドもSAQEを参考に用意していただけると嬉しいです。
gzip -r INPUT; # ディスクを圧迫したくなくて圧縮、ワークフローではあってもなくてもよいと思います。

docker run --rm -v `pwd`:/DATA -w /DATA -i clinicalgenomics/trim_galore:0.6.7 trim_galore \
-j 14 --gzip --fastqc --trim1 \
--output_dir 1_trim_galore --paired INPUT/SRR8096262_1.fastq.gz INPUT/SRR8096262_2.fastq.gz;

# マッピングを行う
sudo rm -rf 2_star
mkdir 2_star; # マッピングファイル保存ディレクトリ
docker run --rm -v `pwd`:/DATA -w /DATA -i kazukinakamae/star_for_human_gatk:latest STAR \
--genomeDir ../hg38_index --readFilesIn 1_trim_galore/SRR8096262_1_val_1.fq.gz 1_trim_galore/SRR8096262_2_val_2.fq.gz \
--readFilesCommand zcat --runThreadN 14 --outSAMtype BAM SortedByCoordinate \
--outFileNamePrefix 2_star/star_;
















# topで監視

# 標準出力結果を命名
mv nohup.out star_stdout.txt;

# アウトプットを整理
mkdir GSE121668_star_mapped;
mv SRR8096262_prinseqpp* GSE121668_star_mapped/.;



### 20220907

# 再ログイン
ssh bonohulab2@10.28.16.58 -p 10022
bonohulab2020

# samtoolsインストール
conda create -n samtools_nakamae_env;
conda activate samtools_nakamae_env;
conda install -c bioconda samtools;

# faiインデックス作成
# samtools faidx Homo_sapiens.GRCh38.dna.primary_assembly.fa;

# リードグループの確認
samtools view -H GSE121668_star_mapped/SRR8096262_prinseqppAligned.sortedByCoord.out.bam | grep '^@RG';
# なし

# picardインストール
conda deactivate;
conda create -n picard_nakamae_env;
conda activate picard_nakamae_env;
conda install -c bioconda picard;

# リードグループ追加
mkdir GSE121668_star_mapped_RG
picard AddOrReplaceReadGroups \
    --INPUT GSE121668_star_mapped/SRR8096262_prinseqppAligned.sortedByCoord.out.bam \
    --OUTPUT GSE121668_star_mapped_RG/SRR8096262_prinseqppAligned.sortedByCoord.out.addRG.bam \
    --RGID FLOWCELLID \
    --RGLB SRR8096262_library1 \
    --RGPU unknown \
    --RGPL illumina \
    --RGSM SRR8096262 \
    --CREATE_INDEX true;

# dictファイルを作成
picard CreateSequenceDictionary -R Homo_sapiens.GRCh38.dna.primary_assembly.fa -O Homo_sapiens.GRCh38.dna.primary_assembly.dict;

# gatkインストール
conda deactivate;
conda create -n gatk4_nakamae_env;
conda activate gatk4_nakamae_env;
conda install -c bioconda gatk4;

# 重複除去
mkdir GSE121668_star_mapped_duprm
gatk MarkDuplicatesSpark -I GSE121668_star_mapped_RG/SRR8096262_prinseqppAligned.sortedByCoord.out.addRG.bam -O GSE121668_star_mapped_duprm/SRR8096262_prinseqppAligned.sortedByCoord.out.addRG.duprm.bam;

# Split
mkdir GSE121668_star_mapped_duprm_splitN
gatk SplitNCigarReads \
     -R Homo_sapiens.GRCh38.dna.primary_assembly.fa \
     -I GSE121668_star_mapped_duprm/SRR8096262_prinseqppAligned.sortedByCoord.out.addRG.duprm.bam \
     -O GSE121668_star_mapped_duprm_splitN/SRR8096262_prinseqppAligned.sortedByCoord.out.addRG.duprm.splitn.bam;

# samtoolsインストール
conda deactivate;
conda activate samtools_nakamae_env;

# リードグループの確認
samtools view -H GSE121668_star_mapped_duprm_splitN/SRR8096262_prinseqppAligned.sortedByCoord.out.addRG.duprm.splitn.bam | grep '^@RG';
# @RG	ID:FLOWCELLID	LB:SRR8096262_library1	PL:illumina	SM:SRR8096262	PU:unknown

# gatkインストール
conda deactivate;
conda activate gatk4_nakamae_env;

# バリアントコール（ハプロタイプ推定）
cd Nakamae/RNA_offtarget_analysis
mkdir GSE121668_vcf
mkdir tmp;
nohup sh -c 'gatk --java-options "-Djava.io.tmpdir=/lscratch/$SLURM_JOBID -Xms200G -Xmx200G -XX:ParallelGCThreads=14" HaplotypeCaller -R /home/bonohulab2/Nakamae/RNA_offtarget_analysis/Homo_sapiens.GRCh38.dna.primary_assembly.fa -I GSE121668_star_mapped_duprm_splitN/SRR8096262_prinseqppAligned.sortedByCoord.out.addRG.duprm.splitn.bam -O GSE121668_vcf/SRR8096262.hg38.vcf.gz -ERC GVCF --tmp-dir ./tmp --sample-name SRR8096262' &

# topで監視
top

# アウトプットを整理
mv nohup.out haplotypecaller_stdout.txt;
head -n 1000 GSE121668_vcf/SRR8096262.hg38.vcf;
gunzip --keep GSE121668_vcf/SRR8096262.hg38.vcf.gz

# １置換変異のみ抽出
# 下記のサイトを参考にする。通常はレプリケートをとって、"Consolidate GVCFs"でバリアントの確定を行うが参考論文ではここのレプリケートを提示するので、そこはスキップして実施してみる
# https://gatk.broadinstitute.org/hc/en-us/articles/360035535932-Germline-short-variant-discovery-SNPs-Indels-
# https://bi.biopapyrus.jp/gwas/gatk/short-variants.html
echo -e "1\n2\n3\n4\n5" > intervals.list
gatk GenomicsDBImport -R Homo_sapiens.GRCh38.dna.primary_assembly.fa \
     -V GSE121668_vcf/SRR8096262.hg38.vcf.gz \
     -L intervals.list \
     --genomicsdb-workspace-path gvcfs_db;
mkdir GSE121668_vcf_identified;
gatk GenotypeGVCFs -R Homo_sapiens.GRCh38.dna.primary_assembly.fa \
     -V gendb://gvcfs_db \
     -O GSE121668_vcf_identified/SRR8096262.hg38.identified.vcf;
# フィルタリング
mkdir GSE121668_vcf_snp;
gatk SelectVariants -R /home/bonohulab2/Nakamae/RNA_offtarget_analysis/Homo_sapiens.GRCh38.dna.primary_assembly.fa \
     -V GSE121668_vcf_identified/SRR8096262.hg38.identified.vcf \
     --select-type-to-include SNP \
     -O GSE121668_vcf_snp/SRR8096262.hg38.identified.snp.vcf;
mkdir GSE121668_vcf_snp_fltr;
gatk VariantFiltration -R /home/bonohulab2/Nakamae/RNA_offtarget_analysis/Homo_sapiens.GRCh38.dna.primary_assembly.fa \
     -V GSE121668_vcf_snp/SRR8096262.hg38.identified.snp.vcf \
     -O GSE121668_vcf_snp_fltr/SRR8096262.hg38.identified.snp.fltr.vcf \
     -filter "QD < 2.0" --filter-name "QD2"       \
     -filter "QUAL < 30.0" --filter-name "QUAL30" \
     -filter "SOR > 4.0" --filter-name "SOR4"     \
     -filter "FS > 60.0" --filter-name "FS60"     \
     -filter "MQ < 40.0" --filter-name "MQ40"     \
     -filter "MQRankSum < -12.5" --filter-name "MQRankSum-12.5" \
     -filter "ReadPosRankSum < -8.0" --filter-name "ReadPosRankSum-8";
conda deactivate;

# 周辺配列の取得
# スクリプトの転送
rsync -e "ssh -p 10022" -avvz --progress extract_flanking_seq_from_vcf.py bonohulab2@10.28.16.58:/home/bonohulab2/Nakamae/RNA_offtarget_analysis;
# 実行
conda create -n pysam_nakamae_env;
conda activate pysam_nakamae_env;
conda install -c bioconda pysam;
mkdir variant_region_seq;
python extract_flanking_seq_from_vcf.py;

# データをインポート
# 圧縮
tar zcvf SRR8096262_variant_region_seq.tar.gz variant_region_seq/
# 別タブでローカルへプル
rsync -e "ssh -p 10022" -a bonohulab2@10.28.16.58:/home/bonohulab2/Nakamae/RNA_offtarget_analysis/SRR8096262_variant_region_seq.tar.gz /Users/kazuki/Documents/Lab/RNA_offtarget_analysis/20220904_analysis/;
# 展開
mkdir SRR8096262_variant_region_seq;
tar zxvf SRR8096262_variant_region_seq.tar.gz -C SRR8096262_variant_region_seq --strip-components 1;

# WebLogo3で配列モチーフを可視化
# https://weblogo.threeplusone.com/create.cgi
# SRR8096262_variant_region_seq/SRR8096262.hg38.identified.snp.fltr.CtoT.fa
# 59605
# SRR8096262_variant_region_seq/SRR8096262.hg38.identified.snp.fltr.GtoA.fa
# 56743


# VAFを算出
conda create -n bcftools_nakamae_env;
conda activate bcftools_nakamae_env;
conda install -c bioconda bcftools;
mkdir GSE121668_vcf_snp_fltr_addvaf;
bcftools +fill-tags GSE121668_vcf_snp_fltr/SRR8096262.hg38.identified.snp.fltr.vcf -Ov -o GSE121668_vcf_snp_fltr_addvaf/SRR8096262.hg38.identified.snp.fltr.vaf.vcf -- -t VAF;

# Headerの情報が欠損しているので修正する
conda deactivate;
conda activate picard_nakamae_env;
picard FixVcfHeader \
     -I GSE121668_vcf_snp_fltr_addvaf/SRR8096262.hg38.identified.snp.fltr.vaf.vcf \
     -O GSE121668_vcf_snp_fltr_addvaf/SRR8096262.hg38.identified.snp.fltr.vaf.headerfixed.vcf;


# VAFでバリアントを仕分けする。
mkdir GSE121668_vcf_snp_fltr_addvaf_highvaf
mkdir GSE121668_vcf_snp_fltr_addvaf_lowvaf
# high (VAF>=0.8)
bcftools view -O z -o GSE121668_vcf_snp_fltr_addvaf_highvaf/SRR8096262.hg38.identified.snp.fltr.vaf.headerfixed.highvaf.vcf.gz -e 'FORMAT/VAF<0.8' GSE121668_vcf_snp_fltr_addvaf/SRR8096262.hg38.identified.snp.fltr.vaf.headerfixed.vcf;
gunzip GSE121668_vcf_snp_fltr_addvaf_highvaf/SRR8096262.hg38.identified.snp.fltr.vaf.headerfixed.highvaf.vcf.gz;
head -n 300 GSE121668_vcf_snp_fltr_addvaf_highvaf/SRR8096262.hg38.identified.snp.fltr.vaf.headerfixed.highvaf.vcf;
# low (VAF<0.8)
bcftools view -O z -o GSE121668_vcf_snp_fltr_addvaf_lowvaf/SRR8096262.hg38.identified.snp.fltr.vaf.headerfixed.lowvaf.vcf.gz -e 'FORMAT/VAF>=0.8' GSE121668_vcf_snp_fltr_addvaf/SRR8096262.hg38.identified.snp.fltr.vaf.headerfixed.vcf;
gunzip GSE121668_vcf_snp_fltr_addvaf_lowvaf/SRR8096262.hg38.identified.snp.fltr.vaf.headerfixed.lowvaf.vcf.gz;
head -n 300 GSE121668_vcf_snp_fltr_addvaf_lowvaf/SRR8096262.hg38.identified.snp.fltr.vaf.headerfixed.lowvaf.vcf;

# 周辺配列を取得する
conda deactivate;
mkdir highVAF_variant_region_seq;
mkdir lowVAF_variant_region_seq;
# スクリプトの転送
rsync -e "ssh -p 10022" -avvz --progress extract_flanking_seq_from_vcf_withVAF.py bonohulab2@10.28.16.58:/home/bonohulab2/Nakamae/RNA_offtarget_analysis;
# 実行
conda activate pysam_nakamae_env;
python extract_flanking_seq_from_vcf_withVAF.py;
# データをインポート
# 圧縮
tar zcvf SRR8096262_high_variant_region_seq.tar.gz highVAF_variant_region_seq/
tar zcvf SRR8096262_low_variant_region_seq.tar.gz lowVAF_variant_region_seq/
# 別タブでローカルへプル
rsync -e "ssh -p 10022" -a bonohulab2@10.28.16.58:/home/bonohulab2/Nakamae/RNA_offtarget_analysis/SRR8096262_high_variant_region_seq.tar.gz /Users/kazuki/Documents/Lab/RNA_offtarget_analysis/20220904_analysis/;
rsync -e "ssh -p 10022" -a bonohulab2@10.28.16.58:/home/bonohulab2/Nakamae/RNA_offtarget_analysis/SRR8096262_low_variant_region_seq.tar.gz /Users/kazuki/Documents/Lab/RNA_offtarget_analysis/20220904_analysis/;

# 展開
mkdir SRR8096262_high_variant_region_seq;
tar zxvf SRR8096262_high_variant_region_seq.tar.gz -C SRR8096262_high_variant_region_seq --strip-components 1;
mkdir SRR8096262_low_variant_region_seq;
tar zxvf SRR8096262_low_variant_region_seq.tar.gz -C SRR8096262_low_variant_region_seq --strip-components 1;

# WebLogo3で配列モチーフを可視化
# https://weblogo.threeplusone.com/create.cgi
# highとlowの間で目立った違いはなし...

# GGGenomeで標的と類似したサイトを検索
# https://gggenome.dbcls.jp/hg38/6/?query=GTCATCTTAGTCATTACCTGAGG&db=hg38&gggenome-combobox-dblist-inputEl=Human+genome%2C+GRCh38%2Fhg38+%28Dec%2C+2013%29&nogap=0&k=5&strand=both


conda create -n cmp_guideseq_env_nakamae_env;
conda activate cmp_guideseq_env_nakamae_env;
conda install -c conda-forge biopython;
conda install -c anaconda pandas;
pip install tqdm;
python cmp_guideseq.py SRR8096262_high_variant_region_seq/SRR8096262.hg38.identified.snp.fltr.all.fa gggenme_RNF2_site1_MMandGap_5nt.csv;
####
------------------------------------------------------------
SRR8096262_high_variant_region_seq/SRR8096262.hg38.identified.snp.fltr.all.fa
Total: 51099
Overlap(<6nt MM and Gap): 23
Strong Ocerlap(<3nt MM and Gap): 0
------------------------------------------------------------
全体の0.045%
####
# ターゲットの影響はかなり少なそう。

python cmp_guideseq.py SRR8096262_low_variant_region_seq/SRR8096262.hg38.identified.snp.fltr.all.fa gggenme_RNF2_site1_MMandGap_5nt.csv;
####
------------------------------------------------------------
SRR8096262_low_variant_region_seq/SRR8096262.hg38.identified.snp.fltr.all.fa
Total: 77572
Overlap(<6nt MM and Gap): 54
Strong Ocerlap(<3nt MM and Gap): 1
------------------------------------------------------------
全体の0.070%
####

# ACWモチーフの全ゲノム探索
# スクリプトの転送
rsync -e "ssh -p 10022" -avvz --progress find_seq.py bonohulab2@10.28.16.58:/home/bonohulab2/Nakamae/RNA_offtarget_analysis/
# 実行
conda create -n biopython_env_nakamae_env;
conda activate biopython_env_nakamae_env;
conda install -c conda-forge biopython;
nohup sh -c 'python find_seq.py ACT /home/bonohulab2/Nakamae/RNA_offtarget_analysis/Homo_sapiens.GRCh38.dna.primary_assembly.fa ACT.hg38.bed' &
nohup sh -c 'python find_seq.py ACA /home/bonohulab2/Nakamae/RNA_offtarget_analysis/Homo_sapiens.GRCh38.dna.primary_assembly.fa ACA.hg38.bed' &
nohup sh -c 'python find_seq.py AGT /home/bonohulab2/Nakamae/RNA_offtarget_analysis/Homo_sapiens.GRCh38.dna.primary_assembly.fa rcACT.hg38.bed' &
nohup sh -c 'python find_seq.py TGT /home/bonohulab2/Nakamae/RNA_offtarget_analysis/Homo_sapiens.GRCh38.dna.primary_assembly.fa rcACA.hg38.bed' &

# topで監視
top
54,797,819

wc -l ACA.hg38.bed
54797819 ACA.hg38.bed
wc -l ACT.hg38.bed
47606175 ACT.hg38.bed
wc -l rcACA.hg38.bed
54976510 rcACA.hg38.bed
wc -l rcACT.hg38.bed
47546266 rcACT.hg38.bed
head ACA.hg38.bed
# ゲノム内ではトータルでモチーフは2億件程度存在

# アウトプットを整理
mkdir bed;
mv ACA.hg38.bed bed/ACA.hg38.bed;
mv ACT.hg38.bed bed/ACT.hg38.bed;
mv rcACA.hg38.bed bed/rcACA.hg38.bed;
mv rcACT.hg38.bed bed/rcACT.hg38.bed;

# マッピングされた領域をbedに変換
conda deactivate;
conda create -n bedtools_nakamae_env;
conda activate bedtools_nakamae_env;
conda install -c bioconda bedtools;
bedtools bamtobed -i GSE121668_star_mapped_duprm_splitN/SRR8096262_prinseqppAligned.sortedByCoord.out.addRG.duprm.splitn.bam > bed/SRR8096262_prinseqppAligned.sortedByCoord.out.addRG.duprm.splitn.bam.bed;
sed 's/^/chr/' bed/SRR8096262_prinseqppAligned.sortedByCoord.out.addRG.duprm.splitn.bam.bed > bed/SRR8096262_prinseqppAligned.sortedByCoord.out.addRG.duprm.splitn.bam.chr.bed

# マッピングされた領域のモチーフを抜き出す
# genomeファイル作成
# awk {'print "chr"$1"\t"$2'} Homo_sapiens.GRCh38.dna.primary_assembly.fa.fai > Homo_sapiens.GRCh38.dna.primary_assembly.genome.txt;
bedtools intersect -a bed/ACA.hg38.bed -b bed/SRR8096262_prinseqppAligned.sortedByCoord.out.addRG.duprm.splitn.bam.chr.bed -f 1.0 -sorted > bed/ACA.hg38_mapped.bed;
wc -l bed/ACA.hg38_mapped.bed;
# 27,674,448
bedtools intersect -a bed/ACT.hg38.bed -b bed/SRR8096262_prinseqppAligned.sortedByCoord.out.addRG.duprm.splitn.bam.chr.bed -f 1.0 -sorted > bed/ACT.hg38_mapped.bed;
wc -l bed/ACA.hg38_mapped.bed;
# 25,999,205
bedtools intersect -a bed/rcACA.hg38.bed -b bed/SRR8096262_prinseqppAligned.sortedByCoord.out.addRG.duprm.splitn.bam.chr.bed -f 1.0 -sorted > bed/rcACA.hg38_mapped.bed;
wc -l bed/rcACA.hg38_mapped.bed
# 28,953,381
bedtools intersect -a bed/rcACT.hg38.bed -b bed/SRR8096262_prinseqppAligned.sortedByCoord.out.addRG.duprm.splitn.bam.chr.bed -f 1.0 -sorted > bed/rcACT.hg38_mapped.bed;
wc -l bed/rcACT.hg38_mapped.bed
# 26,819,767

